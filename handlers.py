from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from config import TOKEN

import app.keyboards as kb
from app.database import save_review, get_review, save_review_rating, get_top_reviews, get_average_rating, approve_review
from app.keyboards import generate_rating_keyboard, inline_average_rating_button
from app.database import save_review_for_moderation, get_pending_reviews, update_review_status

router = Router()

user_data = {}

db_pool = None


# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = Bot(token=TOKEN)  # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

def set_db_pool(pool):
    global db_pool
    db_pool = pool

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.main)

MODERATORS = {426327797}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ user_id –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

@router.message(F.text == '/moderate')
async def moderate_reviews(message: Message):
    if message.from_user.id not in MODERATORS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    pending_reviews = await get_pending_reviews(db_pool)
    if not pending_reviews:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    for review in pending_reviews:
        await message.answer(
            f"<b>–ì–æ—Ä–æ–¥:</b> {review['city']}\n"
            f"<b>–£–ª–∏—Ü–∞:</b> {review['street']}\n"
            f"<b>–î–æ–º:</b> {review['house']}\n"
            f"<b>–û—Ç–∑—ã–≤:</b> {review['review']}",
            parse_mode="HTML",
            reply_markup=kb.generate_moderation_buttons(review['id'])
        )


@router.callback_query(lambda c: c.data and c.data.startswith("moderate_"))
@router.callback_query(lambda c: c.data and c.data.startswith("moderate_"))
async def handle_moderation(callback_query: CallbackQuery):
    _, review_id, action = callback_query.data.split("_")
    review_id = int(review_id)

    if action == 'approve':
        await approve_review(db_pool, review_id)
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
    elif action == 'reject':
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∑—ã–≤ –∏ –ø–æ–ª—É—á–∞–µ–º user_id
        user_id = await update_review_status(db_pool, review_id, 'rejected')
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id:
            await bot.send_message(
                chat_id=user_id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
            )



@router.message(F.text == '–û—Ü–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ üìù')
async def start_review(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {'action': 'add_review', 'city': None, 'street': None, 'house': None, 'review': None}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞")

@router.message(F.text == '–ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã üåü')
async def start_find_reviews(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {'action': 'find_review', 'city': None, 'street': None, 'house': None}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞")

@router.message(F.text == '–¢–æ–ø –ª—É—á—à–∏—Ö üèÜ')
async def start_top_best(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {'action': 'top_best', 'city': None}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–æ–ø –ª—É—á—à–∏—Ö –º–µ—Å—Ç:\n–ü—Ä–∏–º–µ—Ä: –ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞")


@router.message()
async def handle_user_input(message: Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        return

    action = user_data[user_id].get('action')

    if action == 'add_review':
        if user_data[user_id]['city'] is None:
            user_data[user_id]['city'] = message.text.strip()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–£–ª–∏—Ü–∞ –ë–µ—Ö—Ç–µ—Ä–µ–≤–∞")
        elif user_data[user_id]['street'] is None:
            user_data[user_id]['street'] = message.text.strip()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–æ–º 5")
        elif user_data[user_id]['house'] is None:
            user_data[user_id]['house'] = message.text.strip()
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:")
        elif user_data[user_id]['review'] is None:
            user_data[user_id]['review'] = message.text.strip()
            await message.answer(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É:",
                reply_markup=kb.generate_rating_keyboard()
            )

    elif action == 'find_review':
        if user_data[user_id]['city'] is None:
            user_data[user_id]['city'] = message.text.strip()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–£–ª–∏—Ü–∞ –ë–µ—Ö—Ç–µ—Ä–µ–≤–∞")
        elif user_data[user_id]['street'] is None:
            user_data[user_id]['street'] = message.text.strip()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–æ–º 5")
        elif user_data[user_id]['house'] is None:
            user_data[user_id]['house'] = message.text.strip()
            reviews = await get_review(
                db_pool,
                user_data[user_id]['city'],
                user_data[user_id]['street'],
                user_data[user_id]['house']
            )
            if reviews:
                reviews_text = "\n\n".join([
                    f"–û—Ç–∑—ã–≤: {review['review']}\n–†–µ–π—Ç–∏–Ω–≥: {review['rating']} ‚≠ê" if review['rating'] is not None
                    else f"–û—Ç–∑—ã–≤: {review['review']}\n–†–µ–π—Ç–∏–Ω–≥: –Ω–µ —É–∫–∞–∑–∞–Ω"
                    for review in reviews
                ])
                await message.answer(
                    f"–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞:\n\n"
                    f"<b>–ì–æ—Ä–æ–¥:</b> {user_data[user_id]['city']}\n"
                    f"<b>–£–ª–∏—Ü–∞:</b> {user_data[user_id]['street']}\n"
                    f"<b>–î–æ–º:</b> {user_data[user_id]['house']}\n\n{reviews_text}",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç.",
                    parse_mode="HTML"
                )
            del user_data[user_id]

    elif action == 'top_best':
        if user_data[user_id]['city'] is None:
            user_data[user_id]['city'] = message.text.strip()
            top_reviews = await get_top_reviews(db_pool, user_data[user_id]['city'])
            if top_reviews:
                reviews_text = "\n\n".join([
                    f"<b>–ê–¥—Ä–µ—Å:</b> {review['city']}, {review['street']}, {review['house']}\n"
                    f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {review['rating']} ‚≠ê\n"
                    f"<b>–û—Ç–∑—ã–≤:</b> {review['review']}"
                    for review in top_reviews
                ])
                await message.answer(
                    f"–¢–æ–ø-10 –ª—É—á—à–∏—Ö –º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ {user_data[user_id]['city']}:\n\n{reviews_text}",
                    parse_mode="HTML",
                    reply_markup=kb.inline_average_rating_button(user_data[user_id]['city'])
                )
            else:
                await message.answer(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {user_data[user_id]['city']} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.",
                    parse_mode="HTML"
                )
            del user_data[user_id]

@router.callback_query(lambda c: c.data and c.data.startswith("rating_"))
async def handle_rating(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    rating = float(callback_query.data.split("_")[1])

    if user_id not in user_data or user_data[user_id].get('action') != 'add_review':
        await callback_query.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await save_review_for_moderation(
        db_pool,
        user_id=user_id,
        city=user_data[user_id]['city'],
        street=user_data[user_id]['street'],
        house=user_data[user_id]['house'],
        review=user_data[user_id]['review'],
        rating=rating
    )
    await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await callback_query.message.edit_text(
        "–í–∞—à –æ—Ç–∑—ã–≤ –∏ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!"
    )
    del user_data[user_id]


@router.callback_query(lambda c: c.data and c.data.startswith("average_rating_"))
async def handle_average_rating(callback_query: CallbackQuery):
    city = callback_query.data.split("_")[2]
    average_rating = await get_average_rating(db_pool, city)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback_query.answer()

    if average_rating is not None:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π
        formatted_rating = f"{average_rating:.2f}".rstrip('0').rstrip('.')
        await callback_query.message.answer(
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –≥–æ—Ä–æ–¥–µ {city}: {formatted_rating} ‚≠ê",
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏.",
            parse_mode="HTML"
        )
